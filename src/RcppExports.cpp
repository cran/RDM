// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// asymmetric_checkerboard_mass
NumericMatrix asymmetric_checkerboard_mass(const NumericVector& X, const NumericVector& Y, R_xlen_t resolution1, R_xlen_t resolution2);
RcppExport SEXP _RDM_asymmetric_checkerboard_mass(SEXP XSEXP, SEXP YSEXP, SEXP resolution1SEXP, SEXP resolution2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution1(resolution1SEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution2(resolution2SEXP);
    rcpp_result_gen = Rcpp::wrap(asymmetric_checkerboard_mass(X, Y, resolution1, resolution2));
    return rcpp_result_gen;
END_RCPP
}
// asymmetric_checkerboard_index
double asymmetric_checkerboard_index(const NumericVector& X, const NumericVector& Y, R_xlen_t k, R_xlen_t l, R_xlen_t resolution1, R_xlen_t resolution2);
RcppExport SEXP _RDM_asymmetric_checkerboard_index(SEXP XSEXP, SEXP YSEXP, SEXP kSEXP, SEXP lSEXP, SEXP resolution1SEXP, SEXP resolution2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type k(kSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type l(lSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution1(resolution1SEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type resolution2(resolution2SEXP);
    rcpp_result_gen = Rcpp::wrap(asymmetric_checkerboard_index(X, Y, k, l, resolution1, resolution2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RDM_asymmetric_checkerboard_mass", (DL_FUNC) &_RDM_asymmetric_checkerboard_mass, 4},
    {"_RDM_asymmetric_checkerboard_index", (DL_FUNC) &_RDM_asymmetric_checkerboard_index, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_RDM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
